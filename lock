#!/bin/bash

set +x

cd "$(dirname "$(realpath "$0")")" || exit 1

check_locked() {
    sleep 1
    pgrep i3lock >/dev/null && LOCKED=true || LOCKED=false
    [[ $LOCKED == true ]] && return 0 || return 1
}
log() {
    echo "$(date)" "$*" | tee -a /tmp/locker.log
}

run() {
    # 1. Lock
    # Try i3lock-color fallback to i3lock
    log "Locking"
    LOCKED=true

    FEH_BG=$(grep -Eo "'.*'" ~/.fehbg | sed "s/'//g")
    LOCKER_IMAGE=~/.cache/lock.png
    CACHE_SHA_FILE="$LOCKER_IMAGE.sha256"

    SHA_BG=$(sha256sum "${FEH_BG}" | awk '{print $1}')
    SHA_CACHE=$(cat "${CACHE_SHA_FILE}" || echo "")

    if [[ ${SHA_BG} != "${SHA_CACHE}" ]]; then
        convert \
            -quality 0% \
            -resize "2560x1440"! \
            -scale 10% \
            -modulate 100,50,100 \
            -scale 1000% \
            "${FEH_BG}" \
            "${LOCKER_IMAGE}"
        echo "${SHA_BG}" > ${CACHE_SHA_FILE}
    fi

    i3lock \
        --nofork \
        --tiling \
        --image="${LOCKER_IMAGE}" &

    while [[ ! $(pgrep i3lock) ]]; do log "waiting for i3lock"; sleep 1; done

    log "Preparing Lock"

    # 2. Run lock hooks
    log "Running pre-lock hooks:"
    for hook in ./lock.d/*.sh; do
        hook_name=$(basename "$hook")
        log "  $hook"
        $hook lock | tee "/tmp/locker.$hook_name.log" &
    done

    # 3. Wait till unlocked
    while [[ $(pgrep -x i3lock) ]]; do sleep 1; done

    LOCKED=false

    log "Unlocked"

    # 4. Run post-unlock hooks
    log "Running post-unlock hooks:"
    for hook in ./lock.d/*.sh; do
        hook_name=$(basename "$hook")
        log "  $hook"
        $hook unlock | tee "/tmp/locker.$hook_name.log" &
    done

    log "Done"
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && run | tee /dev/null
