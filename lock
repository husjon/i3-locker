#!/bin/bash

IMAGE_RESCALE=${IMAGE_RESCALE:-10}
IMAGE_BRIGHTNESS=${IMAGE_BRIGHTNESS:-100}
IMAGE_SATURATION=${IMAGE_SATURATION:-25}
IMAGE_HUE=${IMAGE_HUE:-100}

log() {
    echo "$(date)" "$*" | tee -a /tmp/locker.log
}

run() {
    # 1. Lock
    # Try i3lock-color fallback to i3lock
    log "[!] Preparing Lock"

    LOCKED=true

    FEH_BG=$(grep -Eo "'.*'" ~/.fehbg | sed "s/'//g")
    LOCKER_IMAGE=~/.cache/lock.png
    CACHE_SHA_FILE="$LOCKER_IMAGE.sha256"

    [[ ! -f $LOCKER_IMAGE ]] && rm -f "$CACHE_SHA_FILE"

    SHA_CACHE=$(cat "${CACHE_SHA_FILE}" || echo "")

    if ! cat ${CACHE_SHA_FILE} | sha256sum --check > /dev/null; then
        RESOLUTION="$(xrandr | grep ' connected primary' | grep -Eo '[0-9]+x[0-9]+')"
        convert \
            -quality 0% \
            -resize "${RESOLUTION}" \
            -scale $(( 100 / ${IMAGE_RESCALE} ))% \
            -modulate ${IMAGE_BRIGHTNESS},${IMAGE_SATURATION},${IMAGE_HUE} \
            -scale $(( 100 * ${IMAGE_RESCALE} ))% \
            "${FEH_BG}" \
            "${LOCKER_IMAGE}"
        sha256sum ${FEH_BG} > ${CACHE_SHA_FILE}
    fi

    log "[!] Locking"
    i3lock \
        --tiling \
        --image="${LOCKER_IMAGE}"

    while [[ ! $(pgrep -x i3lock) ]]; do log "waiting for i3lock"; sleep 1; done

    # 2. Run lock hooks
    log "[!] Running post-lock hooks:"
    for hook in ./lock.d/*.sh; do
        hook_name=$(basename "$hook")
        log "  $hook"
        $hook lock | tee "/tmp/locker.$hook_name.log" &
    done

    # 3. Wait till unlocked
    while [[ $(pgrep -x i3lock) ]]; do sleep 1; done

    LOCKED=false

    log "[+] Unlocked"

    # 4. Run post-unlock hooks
    log "[!] Running post-unlock hooks:"
    for hook in ./lock.d/*.sh; do
        hook_name=$(basename "$hook")
        log "  $hook"
        $hook unlock | tee "/tmp/locker.$hook_name.log" &
    done

    log "[+] Done"
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && run | tee /dev/null
